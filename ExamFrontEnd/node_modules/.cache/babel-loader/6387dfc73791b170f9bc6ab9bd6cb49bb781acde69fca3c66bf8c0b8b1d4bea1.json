{"ast":null,"code":"import _regeneratorRuntime from \"D:/atos/Task/ExamFrontEnd/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/atos/Task/ExamFrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/atos/Task/ExamFrontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"D:/atos/Task/ExamFrontEnd/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"D:/atos/Task/ExamFrontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"D:\\\\atos\\\\Task\\\\ExamFrontEnd\\\\src\\\\exams\\\\pages\\\\CreateExamDef.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useCallback } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport './GetAllQuestions.css';\nimport Button from \"../../shared/components/Button/Button\";\nimport Modal from \"../../Model/Model\";\nimport { useForm } from '../../shared/Hooks/form-hook';\nimport ErrorModel from '../../Model/ErorrModel';\nimport axios from \"axios\";\nimport QuestionItem from '../components/QuestionItem';\nimport QuestionList from '../components/QuestionList';\nimport Input from '../../shared/components/input/Input';\nimport { async } from 'q';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar formReducer = function formReducer(state, action) {\n  var formIsValid = true;\n  for (var inputId in state.inputs) {\n    if (inputId === action.inputId) {\n      formIsValid = formIsValid && action.isValid;\n    } else {\n      formIsValid = formIsValid && state.inputs[inputId].isValid;\n    }\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    inputs: _objectSpread(_objectSpread({}, state.inputs), {}, _defineProperty({}, action.inputId, {\n      value: action.value,\n      isValid: action.isValid\n    })),\n    isValid: formIsValid\n  });\n};\nvar CreateExamDef = function CreateExamDef(props) {\n  _s();\n  var _useReducer = useReducer(formReducer, {\n      inputs: {\n        id: {\n          unique: true,\n          defaultValue: literal('gen_random_uuid()'),\n          primaryKey: true,\n          type: Sequelize.UUID\n        },\n        examdefinationid: {\n          allowNull: false,\n          // autoIncrement: true,\n          // primaryKey: true,\n          type: Sequelize.UUID,\n          references: {\n            model: 'examDefinition',\n            key: 'id'\n          }\n        },\n        startedtime: {\n          allowNull: false,\n          type: Sequelize.DATE\n        },\n        endtime: {\n          allowNull: false,\n          type: Sequelize.DATE\n        },\n        duration: {\n          allowNull: false,\n          type: Sequelize.INTEGER\n        },\n        completiontime: {\n          allowNull: false,\n          type: Sequelize.DATE\n        },\n        schduledtimefrom: {\n          allowNull: false,\n          type: Sequelize.DATE\n        },\n        schduledtimeto: {\n          allowNull: false,\n          type: Sequelize.DATE\n        },\n        created_by: {\n          allowNull: false,\n          type: Sequelize.STRING\n          // references: {\n          //   model: 'examDefinitions',\n          //   key: 'created_By'\n          // }\n        },\n\n        createdat: {\n          type: Sequelize.DATE,\n          defaultValue: literal('CURRENT_TIMESTAMP')\n        },\n        taken_by: {\n          allowNull: false,\n          type: Sequelize.STRING\n        },\n        status: {\n          allowNull: false,\n          type: Sequelize.STRING\n        },\n        score: {\n          allowNull: false,\n          type: Sequelize.INTEGER\n        }\n        // updatedAt: {\n        //   allowNull: false,\n        //   type: Sequelize.DATE\n        // }\n      },\n      isValid: false\n    }),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    input = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    loadedQuestions = _useState2[0],\n    setLoadedQuestions = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  // const questionId = useParams().questionId;\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    checkedState = _useState8[0],\n    setCheckedState = _useState8[1];\n  var _useState9 = useState([{}]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    SavedQuestions = _useState10[0],\n    setSavedQuestions = _useState10[1];\n  var _useForm = useForm({\n      name: {\n        value: \"\",\n        isValid: false\n      },\n      category: {\n        value: \"\",\n        isValid: false\n      },\n      subCategory: {\n        value: \"\",\n        isValid: false\n      },\n      mark: {\n        value: \"\",\n        isValid: false\n      },\n      expextedTime: {\n        value: \"\",\n        isValid: false\n      },\n      correctAnswers: {\n        value: \"\",\n        isValid: false\n      },\n      createdAt: {\n        value: \"\",\n        isValid: false\n      },\n      answers: {\n        answer: {\n          value: \"\",\n          isValid: false\n        },\n        description: {\n          value: \"\",\n          isValid: false\n        }\n      }\n    }, false),\n    _useForm2 = _slicedToArray(_useForm, 2),\n    formState = _useForm2[0],\n    setFormData = _useForm2[1];\n  var inputHandler = useCallback(function (id, value, isValid) {\n    dispatch({\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, responseData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(\"http://localhost:5000/api/questions\");\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.data;\n            case 7:\n              responseData = _context.sent;\n              if (!(response.status !== 200)) {\n                _context.next = 10;\n                break;\n              }\n              throw new Error(responseData.message);\n            case 10:\n              setLoadedQuestions(responseData.questions);\n              setCheckedState(new Array(loadedQuestions.length).fill(false));\n              setFormData({\n                name: {\n                  value: responseData.questions.name,\n                  isValid: true\n                },\n                category: {\n                  value: responseData.questions.category,\n                  isValid: true\n                },\n                subCategory: {\n                  value: responseData.questions.subCategory,\n                  isValid: true\n                },\n                mark: {\n                  value: responseData.questions.mark,\n                  isValid: true\n                },\n                expextedTime: {\n                  value: responseData.questions.expextedTime,\n                  isValid: true\n                },\n                correctAnswers: {\n                  value: responseData.questions.correctAnswers,\n                  isValid: true\n                },\n                createdAt: {\n                  value: responseData.questions.createdAt,\n                  isValid: true\n                }\n                // answers: [{\n                //   // name: {\n                //   //   value: \"\",\n                //   //   isValid: true\n                //   // },\n                //   answer: {\n                //     value: responseData.data.questions.answers[0].answer,\n                //     isValid: true\n                //   },\n                //   description: {\n                //     value: responseData.data.questions.answers[0].description,\n                //     isValid: true\n                //   }\n                // }\n              }, true);\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n              setError(_context.t0.message);\n            case 19:\n              setIsLoading(false);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 15]]);\n      }));\n      return function fetchQuestion() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchQuestion();\n  }, [setFormData]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, _this);\n  }\n  if (!loadedQuestions && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Could not find place!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }, _this);\n  }\n  var errorHandler = function errorHandler() {\n    setError(null);\n  };\n  var arr = [];\n  var handleOnChange = function handleOnChange(position) {\n    var updatedCheckedState = checkedState.map(function (item, index) {\n      return index === position ? !item : item;\n    });\n    setCheckedState(updatedCheckedState);\n  };\n  var click = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function click() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var score = 0;\n  var placeSubmitHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {\n      var i, response;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            e.preventDefault();\n            for (i = 0; i < checkedState.length; i++) {\n              if (checkedState[i] === true) {\n                arr.push(loadedQuestions[i]._id);\n                score += loadedQuestions[i].mark;\n              }\n            }\n            score = score / 2;\n            console.log(score);\n            _context3.prev = 4;\n            _context3.next = 7;\n            return axios.post(\"http://localhost:3000/api/exams/examdef\", {\n              // method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                exam_name: input.inputs.exam_name.value,\n                passing_score: score,\n                created_by: \"T1\",\n                questions: arr\n                // created_by: formState.inputs.mark.valuey\n              })\n            });\n          case 7:\n            response = _context3.sent;\n            // history.push('/');\n            console.log(response);\n            _context3.next = 15;\n            break;\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](4);\n            console.log(_context3.t0);\n            setError(_context3.t0.message);\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[4, 11]]);\n    }));\n    return function placeSubmitHandler(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModel, {\n      error: error,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"place-form\",\n      onSubmit: placeSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"input-group-text\",\n          id: \"inputGroup-sizing-sm\",\n          children: \"Exam Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"exam_name\",\n          element: \"input\",\n          type: \"text\",\n          errorText: \"Please enter a valid title.\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"choose questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, _this), loadedQuestions.map(function (_ref4, index) {\n        var name = _ref4.name;\n        return (\n          /*#__PURE__*/\n          // <li key={index}>\n          _jsxDEV(\"div\", {\n            className: \"toppings-list-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"left-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: loadedQuestions[index]._id,\n                name: loadedQuestions[index].name,\n                value: loadedQuestions[index].name,\n                checked: setCheckedState[index],\n                onChange: function onChange() {\n                  return handleOnChange(index);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 33\n              }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 25\n          }, _this)\n        );\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        onClick: click,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 9\n  }, _this);\n};\n_s(CreateExamDef, \"CkAwAxV/9pKtPbNR+G1iATLZkoU=\", false, function () {\n  return [useForm];\n});\n_c = CreateExamDef;\nexport default CreateExamDef;\nvar _c;\n$RefreshReg$(_c, \"CreateExamDef\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useCallback","Card","Button","Modal","useForm","ErrorModel","axios","QuestionItem","QuestionList","Input","async","jsxDEV","_jsxDEV","formReducer","state","action","formIsValid","inputId","inputs","isValid","_objectSpread","_defineProperty","value","CreateExamDef","props","_s","_useReducer","id","unique","defaultValue","literal","primaryKey","type","Sequelize","UUID","examdefinationid","allowNull","references","model","key","startedtime","DATE","endtime","duration","INTEGER","completiontime","schduledtimefrom","schduledtimeto","created_by","STRING","createdat","taken_by","status","score","_useReducer2","_slicedToArray","input","dispatch","_useState","_useState2","loadedQuestions","setLoadedQuestions","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useState7","_useState8","checkedState","setCheckedState","_useState9","_useState10","SavedQuestions","setSavedQuestions","_useForm","name","category","subCategory","mark","expextedTime","correctAnswers","createdAt","answers","answer","description","_useForm2","formState","setFormData","inputHandler","fetchQuestion","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","responseData","wrap","_callee$","_context","prev","next","get","sent","data","Error","message","questions","Array","length","fill","t0","console","log","stop","apply","arguments","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","errorHandler","arr","handleOnChange","position","updatedCheckedState","map","item","index","click","_ref2","_callee2","_callee2$","_context2","placeSubmitHandler","_ref3","_callee3","e","i","_callee3$","_context3","preventDefault","push","_id","post","headers","body","JSON","stringify","exam_name","passing_score","_x","Fragment","onClear","onSubmit","element","errorText","onInput","_ref4","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/atos/Task/ExamFrontEnd/src/exams/pages/CreateExamDef.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useCallback } from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport './GetAllQuestions.css';\r\nimport Button from \"../../shared/components/Button/Button\";\r\nimport Modal from \"../../Model/Model\";\r\nimport { useForm } from '../../shared/Hooks/form-hook';\r\nimport ErrorModel from '../../Model/ErorrModel';\r\nimport axios from \"axios\";\r\nimport QuestionItem from '../components/QuestionItem';\r\nimport QuestionList from '../components/QuestionList';\r\nimport Input from '../../shared/components/input/Input';\r\nimport { async } from 'q';\r\nconst formReducer = (state, action) => {\r\n    let formIsValid = true;\r\n    for (const inputId in state.inputs) {\r\n        if (inputId === action.inputId) {\r\n            formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: { value: action.value, isValid: action.isValid }\r\n        },\r\n        isValid: formIsValid\r\n    };\r\n};\r\nconst CreateExamDef = props => {\r\n\r\n\r\n    const [input, dispatch] = useReducer(formReducer, {\r\n        inputs: {\r\n            id: {\r\n                unique:true,\r\n                defaultValue: literal('gen_random_uuid()'),\r\n                primaryKey: true,\r\n                type: Sequelize.UUID\r\n              },\r\n              examdefinationid: {\r\n                allowNull: false,\r\n                // autoIncrement: true,\r\n                // primaryKey: true,\r\n                type: Sequelize.UUID,\r\n                references: {\r\n                  model: 'examDefinition',\r\n                  key: 'id'\r\n                }\r\n              },\r\n              startedtime: {\r\n                allowNull: false,\r\n                type: Sequelize.DATE\r\n              },\r\n              endtime: {\r\n                allowNull: false,\r\n                type: Sequelize.DATE\r\n              },\r\n              duration:{\r\n                allowNull:false,\r\n                type:Sequelize.INTEGER\r\n              },\r\n              completiontime: {\r\n                allowNull: false,\r\n                type: Sequelize.DATE\r\n              },\r\n              schduledtimefrom: {\r\n                allowNull: false,\r\n                type: Sequelize.DATE\r\n              },\r\n              schduledtimeto: {\r\n                allowNull: false,\r\n                type: Sequelize.DATE\r\n              },\r\n              created_by: {\r\n                allowNull: false,\r\n                type: Sequelize.STRING,\r\n                // references: {\r\n                //   model: 'examDefinitions',\r\n                //   key: 'created_By'\r\n                // }\r\n              },\r\n              createdat: {\r\n                type: Sequelize.DATE,\r\n                defaultValue:literal('CURRENT_TIMESTAMP')\r\n              },\r\n              taken_by: {\r\n                allowNull: false,\r\n                type: Sequelize.STRING,\r\n              },\r\n              status: {\r\n                allowNull: false,\r\n                type: Sequelize.STRING,\r\n              },\r\n              score: {\r\n                allowNull:false,\r\n                type:Sequelize.INTEGER\r\n              }\r\n              // updatedAt: {\r\n              //   allowNull: false,\r\n              //   type: Sequelize.DATE\r\n              // }\r\n        }, isValid: false\r\n    })\r\n\r\n\r\n    const [loadedQuestions, setLoadedQuestions] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // const questionId = useParams().questionId;\r\n    const [error, setError] = useState();\r\n\r\n    const [checkedState, setCheckedState] = useState([]);\r\n    const [SavedQuestions, setSavedQuestions] = useState([{}]);\r\n\r\n\r\n    const [formState, setFormData] = useForm(\r\n        {\r\n            name: {\r\n                value: \"\",\r\n                isValid: false\r\n            },\r\n            category: {\r\n                value: \"\",\r\n                isValid: false\r\n            },\r\n            subCategory: {\r\n                value: \"\",\r\n                isValid: false\r\n            },\r\n            mark: {\r\n                value: \"\",\r\n                isValid: false\r\n            },\r\n            expextedTime: {\r\n                value: \"\",\r\n                isValid: false\r\n            }\r\n            ,\r\n            correctAnswers: {\r\n                value: \"\",\r\n                isValid: false\r\n            }\r\n            ,\r\n            createdAt: {\r\n                value: \"\",\r\n                isValid: false\r\n            },\r\n            answers: {\r\n                answer: {\r\n                    value: \"\",\r\n                    isValid: false\r\n                },\r\n                description: {\r\n                    value: \"\",\r\n                    isValid: false\r\n                }\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchQuestion = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/api/questions\"\r\n                );\r\n\r\n                const responseData = await response.data;\r\n\r\n                if (response.status !== 200) {\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setLoadedQuestions(responseData.questions);\r\n\r\n                setCheckedState(new Array(loadedQuestions.length).fill(false));\r\n\r\n\r\n                setFormData(\r\n                    {\r\n                        name: {\r\n                            value: responseData.questions.name,\r\n                            isValid: true\r\n                        },\r\n                        category: {\r\n                            value: responseData.questions.category,\r\n                            isValid: true\r\n                        },\r\n                        subCategory: {\r\n                            value: responseData.questions.subCategory,\r\n                            isValid: true\r\n                        },\r\n                        mark: {\r\n                            value: responseData.questions.mark,\r\n                            isValid: true\r\n                        },\r\n                        expextedTime: {\r\n                            value: responseData.questions.expextedTime,\r\n                            isValid: true\r\n                        }\r\n                        ,\r\n                        correctAnswers: {\r\n                            value: responseData.questions.correctAnswers,\r\n                            isValid: true\r\n                        }\r\n                        ,\r\n                        createdAt: {\r\n                            value: responseData.questions.createdAt,\r\n                            isValid: true\r\n                        },\r\n                        // answers: [{\r\n                        //   // name: {\r\n                        //   //   value: \"\",\r\n                        //   //   isValid: true\r\n                        //   // },\r\n                        //   answer: {\r\n                        //     value: responseData.data.questions.answers[0].answer,\r\n                        //     isValid: true\r\n                        //   },\r\n                        //   description: {\r\n                        //     value: responseData.data.questions.answers[0].description,\r\n                        //     isValid: true\r\n                        //   }\r\n                        // }\r\n\r\n                    },\r\n                    true\r\n                );\r\n\r\n\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n                setError(err.message);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        fetchQuestion();\r\n    }, [setFormData]);\r\n\r\n\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <h2>Loading...</h2>\r\n            </div>\r\n        );\r\n    }\r\n    if (!loadedQuestions && !error) {\r\n        return (<div className=\"center\">\r\n            <Card>\r\n                <h2>Could not find place!</h2>\r\n            </Card>\r\n        </div>);\r\n    }\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n\r\n\r\n    let arr = [];\r\n    const handleOnChange = (position) => {\r\n        const updatedCheckedState = checkedState.map((item, index) =>\r\n            index === position ? !item : item\r\n        );\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n\r\n\r\n\r\n    const click = async () => {\r\n\r\n\r\n\r\n    }\r\n\r\n    let score = 0;\r\n    const placeSubmitHandler = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        for (let i = 0; i < checkedState.length; i++) {\r\n            if (checkedState[i] === true) {\r\n                arr.push(loadedQuestions[i]._id);\r\n                score += loadedQuestions[i].mark\r\n\r\n            }\r\n\r\n        }\r\n        score = score / 2;\r\n        console.log(score);\r\n       \r\n        try {\r\n            const response = await axios.post(\"http://localhost:3000/api/exams/examdef\", {\r\n                // method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    exam_name: input.inputs.exam_name.value,\r\n                    passing_score: score,\r\n                    created_by: \"T1\",\r\n                    questions: arr\r\n                    // created_by: formState.inputs.mark.valuey\r\n                })\r\n            });\r\n            // history.push('/');\r\n            console.log(response)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            setError(err.message);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModel error={error} onClear={errorHandler} />\r\n            <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Exam Name</span>\r\n                    {/* <input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" onInput={inputHandler} id='exam_name' /> */}\r\n\r\n                    <Input\r\n                        id=\"exam_name\"\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        errorText=\"Please enter a valid title.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                </div>\r\n\r\n\r\n                {/* <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Passing Score</span>\r\n                    <input className=\"form-control\" type=\"text\" id=\"country\" name=\"country\" value={score} readonly/>\r\n                    \r\n                </div> */}\r\n                <span >choose questions</span>\r\n                {loadedQuestions.map(({ name }, index) => {\r\n                    return (\r\n                        // <li key={index}>\r\n                        <div className=\"toppings-list-item\">\r\n                            <div className=\"left-section\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={loadedQuestions[index]._id}\r\n                                    name={loadedQuestions[index].name}\r\n                                    value={loadedQuestions[index].name}\r\n                                    checked={setCheckedState[index]}\r\n                                    onChange={() => handleOnChange(index)}\r\n                                />\r\n\r\n                                <label >{name}</label>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n\r\n                })}\r\n                <button className='btn btn-primary' type='submit' onClick={click}>Done</button>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CreateExamDef;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}